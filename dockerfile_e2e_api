FROM node:22 AS builder
WORKDIR /home/api
# Install dependencies first to leverage Docker layer caching
COPY ./api/package*.json /home/api/
RUN if [ -f package-lock.json ]; then npm ci --include=dev; else npm install --include=dev; fi
# Copy source and build
COPY ./api /home/api
RUN npm run build

# Build front (Angular) and front-admin, and place their outputs where the API expects them at runtime
WORKDIR /home/front
COPY ./front/package*.json /home/front/
RUN if [ -f package-lock.json ]; then npm ci --include=dev; else npm install --include=dev; fi
COPY ./front /home/front
RUN npm run build

WORKDIR /home/front-admin
COPY ./front-admin/package*.json /home/front-admin/
RUN if [ -f package-lock.json ]; then npm ci --include=dev; else npm install --include=dev; fi
COPY ./front-admin /home/front-admin
RUN npm run build

# Move built front apps into API dist paths expected by CSP/index serving
WORKDIR /home
RUN mkdir -p /home/api/dist/front /home/api/dist/front-admin && \
    if [ -d /home/front/dist/browser ]; then cp -r /home/front/dist/browser/* /home/api/dist/front/; fi && \
    if [ -d /home/front-admin/dist/browser ]; then cp -r /home/front-admin/dist/browser/* /home/api/dist/front-admin/; fi

FROM node:22 AS runtime
WORKDIR /home/api
ENV NODE_ENV=production
# Copy built app and dependencies
COPY --from=builder /home/api/dist /home/api/dist
COPY --from=builder /home/api/node_modules /home/api/node_modules
COPY ./api/package*.json /home/api/
# Start fast: no install/build at runtime
CMD echo "NODE_ENV = $NODE_ENV"; npm run start:production;
