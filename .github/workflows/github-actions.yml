name: GitHub Actions
on:
  push:
    branches: [dev, sandbox]
  pull_request:
    branches: [dev, sandbox]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to publish under reports/pr-<number>'
        required: true
        type: string

jobs:
  api-tests:
    runs-on: ubuntu-latest
    steps:
      - run: echo "API TESTS"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - run: docker compose version

      - name: Install dependencies
        run: npm i

      - name: Run API tests (Mocha + Mochawesome, no NYC)
        run: |
          set -e
          docker compose -p test-api -f docker-compose.test.yml build
          # Run Mocha directly in container to avoid NYC
          docker compose -p test-api -f docker-compose.test.yml run --rm api sh -lc "NODE_ENV=test mocha --config .mocharc.yaml"
          exitcode=$?
          docker compose -p test-api -f docker-compose.test.yml down
          exit ${exitcode}

      - name: Debug - List API generated files
        if: always()
        run: |
          echo "API test directory structure:"
          find ./api -type f -name "*.json" -o -name "*.html" | head -20
          echo "API test reports:"
          ls -la ./api/test/ || echo "API test directory not found"
          echo "Files in api/test/:"
          find ./api/test/ -type f -exec ls -la {} \; 2>/dev/null || echo "No API test reports found"
          echo "Mochawesome specific files:"
          find ./api -name "*.html" -o -name "mochawesome*" 2>/dev/null || echo "No mochawesome files found"

      - name: Upload Mocha test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mocha-report
          path: ./api/test/reports

  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - run: echo "E2E TESTS"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - run: docker compose version

      - name: Install dependencies
        run: npm i

      - name: Run E2E tests (Cypress JSON-only, containerized)
        run: |
          docker compose -p test-e2e -f docker-compose-e2e.test.yml up -d db front api redis-server-e2e || true
          docker compose -p test-e2e -f docker-compose-e2e.test.yml run --rm \
            -e CY_JSON_ONLY=1 \
            -e CYPRESS_BASE_URL=http://175.0.0.30:4200 \
            -e NG_APP_SERVER_URL=http://175.0.0.20:8081/api \
            cypress sh -lc '
              set -e
              cd /e2e
              npm ci
              echo "Waiting for front at $CYPRESS_BASE_URL ..."
              npx -y wait-on -t 180000 -i 2000 "$CYPRESS_BASE_URL"
              rm -rf cypress/reports && mkdir -p cypress/reports
              npx cypress run --spec "cypress/e2e/**/*.cy.*"
              echo "=== E2E reports ==="; ls -la cypress/reports || true
            '
          docker compose -p test-e2e -f docker-compose-e2e.test.yml down || true

      - name: Debug - List E2E generated files
        if: always()
        run: |
          echo "=== END-TO-END TESTS DEBUG ==="
          echo "Listing end-to-end directory structure:"
          find ./end-to-end -type f -name "*.json" -o -name "*.html" | head -20
          echo "Reports directory content:"
          ls -la ./end-to-end/cypress/reports/ || echo "Reports directory not found"

      - name: Upload Cypress video
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-video
          path: ./end-to-end/cypress/videos

      - name: Upload Cypress test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-reports
          path: ./end-to-end/cypress/reports

  deploy:
    needs: [api-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: |
      always() && (
        (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) ||
        (github.event_name == 'workflow_dispatch')
      )
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
      contents: read
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine PR number
        id: prnum
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "pr=${{ github.event.number }}" >> "$GITHUB_OUTPUT"
          else
            echo "pr=${{ inputs.pr_number }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Download Cypress reports artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: cypress-reports
          path: ./cypress-reports

      - name: Download Cypress videos artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: cypress-video
          path: ./cypress-videos

      - name: Download Mocha report artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: mocha-report
          path: ./mocha-report

      - name: Create site directory structure (per PR)
        env:
          PR_NUM: ${{ steps.prnum.outputs.pr }}
        run: |
          set -e
          mkdir -p site/reports/pr-${PR_NUM}
          mkdir -p site/reports/pr-${PR_NUM}/cypress
          cp -r cypress-reports/* site/reports/pr-${PR_NUM}/cypress/ 2>/dev/null || echo "No cypress reports to copy"
          mkdir -p site/reports/pr-${PR_NUM}/videos
          cp -r cypress-videos/* site/reports/pr-${PR_NUM}/videos/ 2>/dev/null || echo "No videos to copy"
          mkdir -p site/reports/pr-${PR_NUM}/mocha
          cp -r mocha-report/* site/reports/pr-${PR_NUM}/mocha/ 2>/dev/null || echo "No mocha test reports to copy"

      - name: Build combined Mochawesome HTML (merged)
        env:
          PR_NUM: ${{ steps.prnum.outputs.pr }}
        run: |
          set -e
          docker run --rm -v "$GITHUB_WORKSPACE:/work" -w /work node:22-alpine sh -lc '
            set -e
            npm i -g mochawesome-merge mochawesome-report-generator
            mkdir -p site/reports/pr-${PR_NUM}/combined
            # Merge any JSONs we have from artifacts
            mochawesome-merge \
              "mocha-report/**/*.json" \
              "cypress-reports/**/*.json" \
              > site/reports/pr-${PR_NUM}/combined/merged.json || true
            # Only generate if merged.json exists and is non-empty
            if [ -s site/reports/pr-${PR_NUM}/combined/merged.json ]; then
              node scripts/section-mochawesome.js site/reports/pr-${PR_NUM}/combined/merged.json site/reports/pr-${PR_NUM}/combined/sectioned.json || cp site/reports/pr-${PR_NUM}/combined/merged.json site/reports/pr-${PR_NUM}/combined/sectioned.json
              marge site/reports/pr-${PR_NUM}/combined/sectioned.json -o site/reports/pr-${PR_NUM}/combined -f a-just-tests-report --overwrite
            else
              echo "No JSONs to merge for combined report"
            fi
          '

      - name: Create per-PR landing index.html
        env:
          PR_NUM: ${{ steps.prnum.outputs.pr }}
        run: |
          mkdir -p site/reports/pr-${PR_NUM}
          cat > site/reports/pr-${PR_NUM}/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>PR Reports</title>
          </head>
          <body>
            <h1>Reports for PR ${PR_NUM}</h1>
            <ul>
              <li><a href="./combined/a-just-tests-report.html" target="_blank">Combined (API + E2E)</a></li>
              <li><a href="./mocha/" target="_blank">Mocha (API)</a></li>
              <li><a href="./cypress/" target="_blank">Cypress (E2E)</a></li>
              <li><a href="./videos/" target="_blank">Cypress Videos</a></li>
            </ul>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comment PR with Combined report URL
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const pageUrl = core.getInput('page_url') || process.env.DEPLOYMENT_PAGE_URL || '${{ steps.deployment.outputs.page_url }}';
            const pr = '${{ steps.prnum.outputs.pr }}';
            const url = `${pageUrl}reports/pr-${pr}/combined/a-just-tests-report.html`;
            const body = `âœ… Combined test report available: ${url}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

  api-coverage:
    runs-on: ubuntu-latest
    steps:
      - run: echo "API COVERAGE (NYC)"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - run: docker compose version

      - name: Install dependencies
        run: npm i

      - name: Run API coverage (NYC + Mocha)
        run: |
          set -e
          docker compose -p test-api -f docker-compose.test.yml build
          docker compose -p test-api -f docker-compose.test.yml run --rm api sh -lc "npm test"
          exitcode=$?
          docker compose -p test-api -f docker-compose.test.yml down
          exit ${exitcode}

      - name: Upload API coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage
          path: ./api/coverage
